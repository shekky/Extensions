<Project>
  <PropertyGroup>
    <MajorVersion>3</MajorVersion>
    <MinorVersion>0</MinorVersion>
    <PatchVersion>0</PatchVersion>
    <VersionPrefix>$(MajorVersion).$(MinorVersion).$(PatchVersion)</VersionPrefix>
    <PreReleaseVersionLabel>preview4</PreReleaseVersionLabel>
  </PropertyGroup>

  <PropertyGroup>
    <ExperimentalVersionPrefix>0.1.$(PatchVersion)</ExperimentalVersionPrefix>
    <!-- Servicing builds have different characteristics for the way dependencies, baselines, and versions are handled. -->
    <IsServicingBuild Condition=" '$(PreReleaseVersionLabel)' == 'servicing' ">true</IsServicingBuild>
    <!-- Run the build with /p:IsFinalBuild=true to produce the product with 'final' branding and versioning -->
    <IsFinalBuild Condition=" '$(IsFinalBuild)' == '' ">false</IsFinalBuild>
    <IncludePreReleaseLabelInPackageVersion>true</IncludePreReleaseLabelInPackageVersion>
    <IncludePreReleaseLabelInPackageVersion Condition=" '$(IsFinalBuild)' == 'true' AND ('$(PreReleaseVersionLabel)' == 'servicing' OR '$(PreReleaseVersionLabel)' == 'rtm')">false</IncludePreReleaseLabelInPackageVersion>
    <!-- The version in files -->
    <ExperimentalPackageVersion>$(ExperimentalVersionPrefix)</ExperimentalPackageVersion>
    <ExperimentalPackageVersion Condition=" '$(IncludePreReleaseLabelInPackageVersion)' == 'true' ">$(VersionPrefix)-$(PreReleaseVersionLabel)</ExperimentalPackageVersion>
    <ExperimentalVersionSuffix>$(PreReleaseVersionLabel)</ExperimentalVersionSuffix>
    <!-- This is used for error checking to ensure generated code and baselines are up to date when we increment the patch. -->
    <PreviousExtensionsReleaseVersion Condition=" '$(PatchVersion)' != '0' ">$(MajorVersion).$(MinorVersion).$([MSBuild]::Subtract($(PatchVersion), 1))</PreviousExtensionsReleaseVersion>
    <InformationalVersion>$(VersionPrefix)-$(VersionSuffix)</InformationalVersion>
  </PropertyGroup>
</Project>
